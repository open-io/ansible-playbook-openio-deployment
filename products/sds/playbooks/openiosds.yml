---
- name: OpenIO SDS - Install requirements to installation on nodes
  any_errors_fatal: "{{ openio_any_errors_fatal }}"
  hosts: openio
  become: true
  environment: "{{ openio_environment }}"
  vars_files:
    - ../vars/sds.yml
  tags:
    - common

  tasks:
    - name: "Include {{ ansible_distribution }} tasks"
      include_tasks: "{{ item }}"
      with_first_found:
        - "openiosds-{{ ansible_distribution }}.yml"
        - "openiosds-{{ ansible_os_family }}.yml"
      tags: install

    - name: "Set sysctl parameters"
      sysctl:
        sysctl_file: "/etc/sysctl.d/openio-sds.conf"
        name: "{{ item.key }}"
        value: "{{ item.value }}"
        sysctl_set: true
        reload: true
        state: "{{ 'absent' if item.value == '' else 'present' }}"
      with_dict: "{{ openio_sysctl_entries }}"
      when:
        - openio_sysctl_managed
        - ansible_virtualization_type != 'docker'
      failed_when: false
      tags: configure

    - name: Check file /etc/cron.daily/logrotate
      stat:
        path: /etc/cron.daily/logrotate
      register: cron_daily_logrotate
      when:
        - openio_log_rotate_hourly
      tags: configure

    - name: Activation of daily logrotate
      command: mv /etc/cron.daily/logrotate /etc/cron.hourly/logrotate
      when:
        - cron_daily_logrotate is not skipped
        - cron_daily_logrotate.stat.exists
        - openio_log_rotate_hourly
      tags: configure

    - name: Set logrotate configuration
      template:
        src: "{{ playbook_dir ~ '/../templates/logrotate-openio-sds.j2' }}"
        dest: /etc/logrotate.d/openio-sds
        owner: root
        group: root
        mode: 0644
      tags: configure

    - name: Ensure cron.hourly exists
      file:
        path: /etc/cron.hourly
        state: directory
      tags: configure

    - name: Set journald configuration
      copy:
        src: "{{ playbook_dir }}/../files/journald.conf"
        dest: "/etc/systemd/journald.conf"
        owner: root
        group: root
        mode: 0644
      register: _journald_conf
      tags: configure

    - name: Restart journald
      systemd:
        name: systemd-journald
        state: restarted
        daemon_reload: true
      when:
        - _journald_conf is changed
        - not openio_maintenance_mode | bool
      tags: configure

    - name: "Ensure {{ namespace }} directory mount exists"
      file:
        path: "{{ item.mountpoint }}/{{ namespace }}"
        state: directory
        owner: openio
        group: openio
        mode: 0750
      with_items:
        - "{{ openio_data_mounts }}"
        - "{{ openio_metadata_mounts }}"
      tags: configure

###

- name: OpenIO SDS - Install and configure OpenIO redis
  any_errors_fatal: "{{ openio_any_errors_fatal }}"
  hosts: redis
  become: true
  environment: "{{ openio_environment }}"
  vars_files:
    - ../vars/sds.yml
  tags: redis

  roles:
    - role: redis
      openio_redis_volume: "{{ openio_redis_volume_format \
        | mkpath(openio_metadata_mounts[0]['mountpoint'], namespace, openio_redis_serviceid) }}"
      when:
        - openio_metadata_mounts is defined
        - openio_metadata_mounts[0]

- name: OpenIO SDS - Install and configure OpenIO redis sentinel
  any_errors_fatal: "{{ openio_any_errors_fatal }}"
  hosts: "{{ 'sentinel' if groups.sentinel is defined else 'redis' }}"
  become: true
  environment: "{{ openio_environment }}"
  vars_files:
    - ../vars/sds.yml
  tags:
    - redis
    - sentinel

  roles:
    - role: redis
      openio_redis_type: "redissentinel"
      openio_redis_bind_port: "{{ openio_redissentinel_bind_port }}"
      openio_redis_volume: "{{ openio_redis_sentinel_volume_format \
        | mkpath(openio_metadata_mounts[0]['mountpoint'], namespace, openio_redis_serviceid) }}"
      when:
        - openio_metadata_mounts is defined
        - openio_metadata_mounts[0]
###

- name: OpenIO SDS - Install and configure OpenIO Namespace
  any_errors_fatal: "{{ openio_any_errors_fatal }}"
  hosts: namespace
  become: true
  environment: "{{ openio_environment }}"
  vars_files:
    - ../vars/sds.yml
  tags: namespace

  roles:
    - role: namespace
###

- name: OpenIO SDS - Install and configure OpenIO Proxy
  any_errors_fatal: "{{ openio_any_errors_fatal }}"
  hosts: oioproxy
  become: true
  environment: "{{ openio_environment }}"
  vars_files:
    - ../vars/sds.yml
  tags: oioproxy

  roles:
    - role: oioproxy
###

- name: OpenIO SDS - Install and configure OpenIO zookeeper
  any_errors_fatal: "{{ openio_any_errors_fatal }}"
  hosts: zookeeper
  become: true
  environment: "{{ openio_environment }}"
  vars_files:
    - ../vars/sds.yml
  tags: zookeeper

  pre_tasks:
    - name: set zookeeper list
      set_fact:
        _zk_string: "{{ openio_zookeeper_addresses_chain \
          | default(groups['zookeeper'] \
          | map('extract', hostvars, ['openio_bind_address']) \
          | list \
          | join_by(3) \
          | regex_replace('([,;])', ':'+ openio_zookeeper_bind_port + '\\1') ~ ':'+ openio_zookeeper_bind_port )}}"
      tags: configure

  roles:
    - role: zookeeper
      openio_zookeeper_volume: "{{ openio_zookeeper_volume_format |\
        mkpath(openio_metadata_mounts[0]['mountpoint'], namespace, openio_zookeeper_serviceid) }}"
      openio_zookeeper_servers: "{{ _zk_string | my_zk_conf_from_string(my_ip=openio_zookeeper_bind_address,zk_port=openio_zookeeper_bind_port) }}"
      when:
        - openio_metadata_mounts is defined
        - openio_metadata_mounts[0]

  tasks:
    - block:
        - name: Check ZooKeeper status
          znode:
            hosts: "{{ openio_bind_address }}:{{ openio_zookeeper_bind_port }}"
            name: "/hc/ns/{{ namespace }}"
            op: get
          register: openio_zk_status
          failed_when: false
          run_once: true
          tags: configure

        - name: "Bootstrapping ZooKeeper for namespace {{ namespace }}"
          command: "openio zk bootstrap --oio-ns {{ namespace }}"
          when: 'openio_zk_status.msg == "The requested node does not exist."'
          register: zk_bootstrap
          until: zk_bootstrap.rc == 0
          retries: 3
          delay: 5
          ignore_errors: true
          run_once: true
          tags: configure

        - name: "Bootstrapping ZooKeeper for namespace {{ namespace }} in slow mode"
          command: "openio zk bootstrap --oio-ns {{ namespace }} --slow"
          when:
            - 'openio_zk_status.msg == "The requested node does not exist."'
            - zk_bootstrap.failed
          register: zk_bootstrap_slow
          until: zk_bootstrap_slow.rc == 0
          retries: 3
          delay: 5
          run_once: true
          tags: configure

      when:
        - openio_metadata_mounts is defined
        - openio_metadata_mounts[0]
        - not ansible_check_mode
###

- name: OpenIO SDS - Install and configure OpenIO beanstalkd
  any_errors_fatal: "{{ openio_any_errors_fatal }}"
  hosts: beanstalkd
  become: true
  environment: "{{ openio_environment }}"
  vars_files:
    - ../vars/sds.yml
  tags: beanstalkd

  roles:
    - role: beanstalkd
      openio_beanstalkd_volume: "{{ volume }}"
      when: "openio_metadata_mounts is defined and openio_metadata_mounts | length \
              or openio_data_mounts is defined and openio_data_mounts | length"
      vars:
        openio_beanstalkd_mounpoint: "{% if openio_metadata_mounts is defined and openio_metadata_mounts | length %}{{ openio_metadata_mounts[0]['mountpoint'] }}{% else %}{{ openio_data_mounts[0]['mountpoint'] }}{% endif %}"
        volume: "{{ openio_beanstalkd_volume_format | mkpath(openio_beanstalkd_mounpoint, namespace, openio_beanstalkd_serviceid) }}"
###

- name: OpenIO SDS - Install and configure OpenIO Conscience
  any_errors_fatal: "{{ openio_any_errors_fatal }}"
  hosts: conscience
  become: true
  environment: "{{ openio_environment }}"
  vars_files:
    - ../vars/sds.yml
  tags: conscience

  roles:
    - role: conscience
###

- name: OpenIO SDS - Install and configure OpenIO Account
  any_errors_fatal: "{{ openio_any_errors_fatal }}"
  hosts: account
  become: true
  environment: "{{ openio_environment }}"
  vars_files:
    - ../vars/sds.yml
  tags: account

  roles:
    - role: account
###

- name: OpenIO SDS - Install and configure OpenIO meta0
  any_errors_fatal: "{{ openio_any_errors_fatal }}"
  hosts: meta0
  become: true
  environment: "{{ openio_environment }}"
  vars_files:
    - ../vars/sds.yml
  tags:
    - meta0
    - meta

  tasks:
    - name: Install meta0
      include_role:
        name: meta
      vars:
        openio_meta_type: meta0
        openio_meta_bind_port: "{{ openio_meta0_bind_port | int + openio_meta_serviceid | int }}"
        openio_meta_volume: "{{ openio_meta0_volume_format \
          | mkpath(openio_metadata_mounts[0]['mountpoint'], namespace, openio_meta_serviceid) }}"
        openio_meta_options: "{{ openio_meta0_options | d([]) }}"
      when:
        - openio_metadata_mounts is defined
        - openio_metadata_mounts[0]
      tags: always
###

- name: OpenIO SDS - Install and configure OpenIO meta1
  any_errors_fatal: "{{ openio_any_errors_fatal }}"
  hosts: meta1
  become: true
  environment: "{{ openio_environment }}"
  vars_files:
    - ../vars/sds.yml
  tags:
    - meta1
    - meta

  tasks:
    - block:
        - name: Generate list of meta1
          set_fact:
            meta1: >-
              {% set _var = [] -%}
              {% for mount in openio_metadata_mounts -%}
              {%   set partition_index = loop.index0 -%}
              {%   set process_per_partition = mount.meta1_count | default(1) -%}
              {%   for service_id_per_partition in range(process_per_partition) -%}
              {%     set service_id_total = service_id_per_partition + process_per_partition * partition_index -%}
              {%     set _dict = {'partition': mount.partition, 'mountpoint': mount.mountpoint, 'id': service_id_total + openio_legacy_serviceid | d(0) | int } -%}
              {%     if _var.append(_dict) -%}{% endif -%}
              {%   endfor -%}
              {% endfor -%}
              {{ _var }}
          tags: always

        - name: Install meta1
          include_role:
            name: meta
          vars:
            openio_meta_type: meta1
            openio_meta_serviceid: "{{ meta.id }}"
            openio_meta_bind_port: "{{ openio_meta1_bind_port | int + meta.id | int }}"
            openio_meta_volume: "{{ openio_meta1_volume_format \
              | mkpath(meta.mountpoint, namespace, openio_meta_serviceid) }}"
            openio_meta_options: "{{ openio_meta1_options | d([]) }}"
          with_items: "{{ meta1 }}"
          loop_control:
            loop_var: meta
          tags: always
      when:
        - openio_metadata_mounts is defined
        - openio_metadata_mounts[0]
###

- name: OpenIO SDS - Install and configure OpenIO meta2
  any_errors_fatal: "{{ openio_any_errors_fatal }}"
  hosts: meta2
  strategy: mitogen_free
  become: true
  environment: "{{ openio_environment }}"
  vars_files:
    - ../vars/sds.yml
  tags:
    - meta2-indexer
    - meta2
    - meta

  tasks:
    - block:
        - name: Generate list of meta2
          set_fact:
            meta2: >-
              {% set _var = [] -%}
              {% for mount in openio_metadata_mounts -%}
              {%   set partition_index = loop.index0 -%}
              {%   if mount.meta2_indexes is defined -%}
              {%     set process_per_partition = mount.meta2_indexes | length | default(1) -%}
              {%   else -%}
              {%     set process_per_partition = mount.meta2_count | default(1) -%}
              {%   endif -%}
              {%   for service_id_per_partition in range(process_per_partition) -%}
              {%     set service_id_total = service_id_per_partition + process_per_partition * partition_index -%}
              {%     set ns = namespace -%}
              {%     if mount.meta2_indexes is defined -%}
              {%       set _dict = {'partition': mount.partition, 'mountpoint': mount.mountpoint, 'ns': ns, 'id': mount.meta2_indexes[loop.index0] + openio_legacy_serviceid | d(0) | int} -%}
              {%     else -%}
              {%       set _dict = {'partition': mount.partition, 'mountpoint': mount.mountpoint, 'ns': ns, 'id': service_id_total + openio_legacy_serviceid | d(0) | int} -%}
              {%     endif -%}
              {%     if _var.append(_dict) -%}{% endif -%}
              {%   endfor -%}
              {% endfor -%}
              {{ _var }}
          tags: always

        - name: Install meta2
          include_role:
            name: meta
          vars:
            openio_meta_type: meta2
            openio_meta_serviceid: "{{ meta.id }}"
            openio_meta_bind_port: "{{ openio_meta2_bind_port | int + meta.id | int }}"
            openio_meta_volume: "{{ openio_meta2_volume_format \
               | mkpath(meta.mountpoint, namespace, openio_meta_serviceid) }}"
            openio_meta_options: "{{ openio_meta2_options | d([]) }}"
          with_items: "{{ meta2 }}"
          loop_control:
            loop_var: meta
          tags: always

        - name: Install oio-meta2-indexer
          include_role:
            name: oio-meta2-indexer
          vars:
            openio_meta2_indexer_volume_list: "{{ openio_meta2_volume_format | mkpaths(namespace, meta2) }}"
          tags: always

      when:
        - openio_metadata_mounts is defined
        - openio_metadata_mounts[0]

# TODO healthcheck

###

- name: OpenIO SDS - Install and configure OpenIO rawx
  any_errors_fatal: "{{ openio_any_errors_fatal }}"
  hosts: rawx
  become: true
  environment: "{{ openio_environment }}"
  vars_files:
    - ../vars/sds.yml
  tags:
    - rawx

  pre_tasks:
    - name: Aggregate rawx instances
      set_fact:
        openio_rawx_instances: >-
          {% set new_list = [] -%}
          {% for mount in openio_data_mounts -%}
          {%   set id = loop.index0 + openio_legacy_serviceid | d(0) | int -%}
          {%   set service = {'id': id, 'port': openio_rawx_bind_port | int + id, 'volume': openio_rawx_volume_format | mkpath(mount.mountpoint, namespace, id), 'state': mount.state | d("present") } -%}
          {%   if new_list.append(service) -%}{% endif -%}
          {% endfor -%}
          {{ new_list }}
      when:
        - openio_data_mounts is defined
        - openio_data_mounts[0]
      tags:
        - install
        - configure
        - bootstrap

  roles:
    - role: rawx
###

- name: OpenIO SDS - Install and configure OpenIO oio-blob-indexer
  any_errors_fatal: "{{ openio_any_errors_fatal }}"
  hosts: oio-blob-indexer
  become: true
  environment: "{{ openio_environment }}"
  vars_files:
    - ../vars/sds.yml
  tags:
    - oio-blob-indexer

  pre_tasks:
    - name: Aggregate blob_indexer instances
      set_fact:
        openio_blob_indexer_instances: >-
          {% set new_list = [] -%}
          {% for mount in openio_data_mounts -%}
          {%   set id = loop.index0 + openio_legacy_serviceid | d(0) | int -%}
          {%   set service = {'id': id, 'volume': openio_blob_indexer_volume_format | mkpath(mount.mountpoint, namespace, id), 'state': mount.state | d("present") } -%}
          {%   if new_list.append(service) -%}{% endif -%}
          {% endfor -%}
          {{ new_list }}
      when:
        - openio_data_mounts is defined
        - openio_data_mounts[0]
      tags: always

  roles:
    - role: oio-blob-indexer
###

- name: OpenIO SDS - Install and configure OpenIO rdir
  any_errors_fatal: "{{ openio_any_errors_fatal }}"
  hosts: rdir
  become: true
  environment: "{{ openio_environment }}"
  vars_files:
    - ../vars/sds.yml
  tags:
    - rdir

  pre_tasks:
    - name: Aggregate rdir instances
      set_fact:
        openio_rdir_instances: >-
          {% set new_list = [] -%}
          {% for mount in openio_data_mounts -%}
          {%   set id = loop.index0 + openio_legacy_serviceid | d(0) | int -%}
          {%   set service = {'id': id, 'port': openio_rdir_bind_port | int + id, 'volume': openio_rdir_volume_format | mkpath(mount.mountpoint, namespace, id), 'state': mount.state | d("present") } -%}
          {%   if new_list.append(service) -%}{% endif -%}
          {% endfor -%}
          {{ new_list }}
      when:
        - openio_data_mounts is defined
        - openio_data_mounts[0]
      tags: always

  roles:
    - role: rdir
###

- name: OpenIO SDS - Install and configure OpenIO oio-blob-rebuilder
  any_errors_fatal: "{{ openio_any_errors_fatal }}"
  hosts: oio-blob-rebuilder
  become: true
  environment: "{{ openio_environment }}"
  vars_files:
    - ../vars/sds.yml
  tags:
    - oio-blob-rebuilder

  roles:
    - role: oio-blob-rebuilder
###

- name: OpenIO SDS - Install and configure OpenIO oio-event-agent
  any_errors_fatal: "{{ openio_any_errors_fatal }}"
  hosts: oio-event-agent
  become: true
  environment: "{{ openio_environment }}"
  vars_files:
    - ../vars/sds.yml
  tags:
    - oio-event-agent

  roles:
    - role: oio-event-agent
###

- name: Install and configure OpenIO ecd
  any_errors_fatal: "{{ openio_any_errors_fatal }}"
  hosts: ecd
  become: true
  environment: "{{ openio_environment }}"
  vars_files:
    - ../vars/sds.yml
  tags:
    - ecd

  roles:
    - role: ecd
###

- name: OpenIO SDS - Install and configure OpenIO conscience-agent
  any_errors_fatal: "{{ openio_any_errors_fatal }}"
  hosts: conscience-agent
  become: true
  environment: "{{ openio_environment }}"
  vars_files:
    - ../vars/sds.yml
  tags: conscience-agent

  roles:
    - role: conscienceagent
###

- name: OpenIO SDS - "Bootstrapping OpenIO namespace"
  any_errors_fatal: "{{ openio_any_errors_fatal }}"
  hosts: conscience[0]:meta0:meta1
  become: true
  environment: "{{ openio_environment }}"
  vars_files:
    - ../vars/sds.yml
  tags: bootstrap

  tasks:
    - block:
        - name: "Restart all meta0"
          command: "/usr/bin/gridinit_cmd restart @meta0"
          when: inventory_hostname in groups.meta0

        - name: "Restart all meta1"
          command: "/usr/bin/gridinit_cmd restart @meta1"
          when: inventory_hostname in groups.meta1

        - block:
            - name: Register number of meta1
              set_fact:
                nb_meta1: "{{ groups.meta1
                  | map('extract', hostvars, ['openio_metadata_mounts'])
                  | flatten
                  | map(attribute='meta1_count') | map('default', 1)
                  | list
                  | sum() | int }}"
              changed_when: false

            - name: "Wait for meta0 to be up"
              command: "openio cluster wait -d {{ openio_timeout_sensible_score }} meta0 --oio-ns={{ namespace }} -n {{ groups.meta0 | d([]) | length }} -s 0"

            - name: "Unlock meta0 scores"
              command: "openio cluster unlockall meta0 --oio-ns={{ namespace }}"

            - name: "Wait for meta1 to be up"
              command: "openio cluster wait -d {{ openio_timeout_sensible_score }} meta1 --oio-ns={{ namespace }} -n {{ nb_meta1 }} -s 0"

            - name: "Unlock meta1 scores"
              command: "openio cluster unlockall meta1 --oio-ns={{ namespace }}"

            - name: "Wait for meta0 & meta1 services"
              command: "openio cluster wait -d {{ openio_timeout_sensible_score }} meta0 meta1 --oio-ns={{ namespace }} -s {{ openio_minimal_score_for_directory_bootstrap }}"
              async: "{{ ( openio_timeout_sensible_score | int ) + 6 }}"
              poll: 5

            - name: "Bootstrapping OpenIO namespace {{ namespace }} with {{ openio_replicas }} replicas"
              command: "openio --oio-ns={{ namespace }} directory bootstrap --replicas {{ openio_replicas }} --no-rdir"
              register: meta_bootstrap
              until: meta_bootstrap.rc == 0
              retries: 3
              delay: 5
          when: inventory_hostname == groups.conscience[0]

        - name: "Restart all meta0"
          command: "/usr/bin/gridinit_cmd restart @meta0"
          when: inventory_hostname in groups.meta0

        - name: "Restart all meta1"
          command: "/usr/bin/gridinit_cmd restart @meta1"
          when: inventory_hostname in groups.meta1

        - block:
            - name: "Wait for meta0 to be up"
              command: "openio cluster wait -d {{ openio_timeout_sensible_score }} meta0 --oio-ns={{ namespace }} -n {{ groups.meta0 | d([]) | length }} -s 0"

            - name: "Wait for meta1 to be up"
              command: "openio cluster wait -d {{ openio_timeout_sensible_score }} meta1 --oio-ns={{ namespace }} -n {{ groups.meta1 | d([]) | length }} -s 0"

            - name: "Unlock all scores"
              command: "openio cluster unlockall --oio-ns={{ namespace }}"

            - name: "Wait for rdir, rawx & meta2 services"
              command: "openio cluster wait -d {{ openio_timeout_sensible_score }} rawx rdir meta2 --oio-ns={{ namespace }} -s {{ openio_minimal_score_for_volume_admin_bootstrap }}"
              async: "{{ ( openio_timeout_sensible_score | int ) + 6 }}"
              poll: 5
          when: inventory_hostname == groups.conscience[0]

        - block:
            - set_fact:
                _location: "{{ openio_rdir_location | d(openio_service_location) }}0"
              changed_when: false

            - name: Register number of rdir
              shell: "openio --oio-ns {{ namespace }} cluster list rdir -f value | wc -l"
              register: nb_rdir
              changed_when: false

            - name: Register number of rawx
              shell: "openio --oio-ns {{ namespace }} cluster list rawx -f value | wc -l"
              register: nb_rawx
              changed_when: false

            - name: Register number of meta2
              shell: "openio --oio-ns {{ namespace }} cluster list meta2 -f value | wc -l"
              register: nb_meta2
              changed_when: false

            - name: Calculate max reference per rdir and minimal distance
              set_fact:
                max_ref_per_rdir: "{{ ( (nb_rawx.stdout | int + nb_meta2.stdout | int) / (nb_rdir.stdout | int) ) | round(method='ceil') | int + 1 }}"
                min_dist: "{{ _location.split('.') | length }}"
              changed_when: false

            - name: "Bootstrapping rawx reverse directory for namespace {{ namespace }}, trying to respect minimum distance between rdir and associated rawx"
              command: "openio --oio-ns={{ namespace }} rdir bootstrap rawx --min-dist {{ min_dist }}"
              register: rdir_bootstrap_rawx_min_dist
              ignore_errors: true

            - name: "Bootstrapping rawx reverse directory for namespace {{ namespace }}"
              command: "openio --oio-ns={{ namespace }} rdir bootstrap rawx --max-per-rdir {{ max_ref_per_rdir }}"
              when:
                - rdir_bootstrap_rawx_min_dist.rc != 0

            - name: "Bootstrapping meta2 reverse directory for namespace {{ namespace }}, trying to respect minimum distance between rdir and associated meta2"
              command: "openio --oio-ns={{ namespace }} rdir bootstrap meta2 --min-dist {{ min_dist }}"
              register: rdir_bootstrap_meta2_min_dist
              ignore_errors: true

            - name: "Bootstrapping meta2 reverse directory for namespace {{ namespace }}"
              command: "openio --oio-ns={{ namespace }} rdir bootstrap meta2 --max-per-rdir {{ max_ref_per_rdir }}"
              when:
                - rdir_bootstrap_meta2_min_dist.rc != 0
          when:
            - inventory_hostname == groups.conscience[0]
            - groups.rdir is defined
            - groups.rdir
      when:
        - openio_bootstrap is defined and openio_bootstrap | bool
        - not ansible_check_mode
        - not openio_maintenance_mode | bool
###
...
