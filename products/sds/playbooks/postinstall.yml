---
- name: POSTINSTALL - Configure node for test
  hosts: oioswift
  become: true
  any_errors_fatal: "{{ openio_any_errors_fatal }}"
  environment: "{{ openio_environment }}"
  vars_files:
    - ../vars/sds.yml

  tasks:
    - name: Install AWS client
      package:
        name: awscli
      # The installation of awscli is a comfort, it is not necessary
      ignore_errors: true
      register: install_awscli
      until: install_awscli is success
      retries: 5
      delay: 2
      tags: install

    - name: Install OpenStack client
      package:
        name: python-openstackclient
      ignore_errors: "{{ ansible_check_mode }}"
      register: install_oscli
      until: install_oscli is success
      retries: 5
      delay: 2
      tags: install

    - name: Get AWS credentials (Keystone)
      block:
        - name: Generate AWS credentials
          command: openstack ec2 credentials create -f json
          run_once: true
          register: cred
          environment:
            OS_PROJECT_DOMAIN_NAME: Default
            OS_USER_DOMAIN_NAME: Default
            OS_PROJECT_NAME: demo
            OS_USERNAME: demo
            OS_PASSWORD: "{{ openio_keystone_demo_password | d('DEMO_PASS') }}"
            OS_AUTH_URL: >-
              {% set url = "" -%}
              {% if openio_bind_virtual_address is defined -%}{% set url = 'http://' ~ openio_bind_virtual_address ~ ':' ~ openio_keystone_public_bind_port -%}{% endif -%}
              {% if openio_bind_virtual_address_fqdn is defined -%}{% set url = 'http://' ~ openio_bind_virtual_address_fqdn ~ ':' ~ openio_keystone_public_bind_port -%}{% endif -%}
              {{ url }}
            OS_IDENTITY_API_VERSION: 3
            OS_IMAGE_API_VERSION: 2
          until: cred is success
          retries: 5
          delay: 2

        - name: Register AWS creds
          no_log: "{{ openio_no_log }}"
          ignore_errors: true
          register: aws_cred
          set_fact:
            access: "{{ (( cred.stdout | from_json ) | selectattr('Field', 'match', 'access') | list | first )['Value'] }}"
            secret: "{{ (( cred.stdout | from_json ) | selectattr('Field', 'match', 'secret') | list | first )['Value'] }}"

        - name: Register AWS creds round 2
          set_fact:
            access: "{{ ( cred.stdout | from_json )['access'] }}"
            secret: "{{ ( cred.stdout | from_json )['secret'] }}"
          when: aws_cred is failed
      when:
        - groups.keystone is defined
        - "'keystone' in groups"
        - groups.keystone | length > 0
      ignore_errors: "{{ ansible_check_mode }}"
      tags: configure

    - name: Get AWS credentials (Tempauth)
      block:
        - name: Get user
          no_log: "{{ openio_no_log }}"
          set_fact:
            openio_oioswift_tempauth_user: "{{ openio_oioswift_filter_tempauth.keys() | select('match', 'user_.*') | list | first }}"
        - name: Get password of user
          no_log: "{{ openio_no_log }}"
          set_fact:
            openio_oioswift_tempauth_pass: "{{ openio_oioswift_filter_tempauth[openio_oioswift_tempauth_user].split(' ')[0] }}"
        - name: register AWS creds (Tempauth)
          no_log: "{{ openio_no_log }}"
          register: aws_cred
          set_fact:
            access: "{{ openio_oioswift_tempauth_user.split('_')[1:] | join(':') }}"
            secret: "{{ openio_oioswift_tempauth_pass }}"
          when:
            - "'keystone' not in groups or ('keystone' in groups and groups['keystone'] | length == 0)"
            - openio_oioswift_filter_tempauth | length > 1

      ignore_errors: "{{ ansible_check_mode }}"
      when: openio_oioswift_filter_tempauth is defined
      tags: configure

    - name: Create .aws folder
      file:
        path: /root/.aws
        state: directory
        mode: 0750
      tags: configure

    - name: Set aws credentials
      no_log: "{{ openio_no_log }}"
      copy:
        dest: /root/.aws/credentials
        content: |
          [default]
          aws_access_key_id = {{ access }}
          aws_secret_access_key = {{ secret }}
      ignore_errors: "{{ ansible_check_mode }}"
      tags: configure

    - name: Copy aws configuration file to openio home directory
      copy:
        src: /root/.aws
        dest: /home/openio/
        remote_src: true
        owner: openio
        group: openio
      ignore_errors: "{{ ansible_check_mode }}"
      tags: configure

    - name: Configure environment for test
      copy:
        dest: "{{ item.path }}"
        content: "{{ item.content }}"
      with_items:
        - path: /root/.aws/config
          content: |
            [default]
            s3 =
               signature_version = s3v4
               max_concurrent_requests = 10
               max_queue_size = 100
               #multipart_threshold = 50MB
               #multipart_chunksize = 10MB
            region = {{ openio_s3_region }}
        - path: /etc/profile.d/openio.sh
          content: |
            export OIO_NS={{ namespace }}
      ignore_errors: "{{ ansible_check_mode }}"
      tags: configure

    - name: "Install of {{ pkg }}"
      package:
        name: "{{ pkg }}"
      register: install_package
      until: install_package is success
      retries: 5
      delay: 2
      tags: install
      vars:
        pkg: "{{ 'util-linux' if ansible_os_family == 'RedHat' else 'bsdmainutils' }}"

    - name: Add script for tests in /usr/bin/openio-basic-checks
      template:
        src: "{{ playbook_dir ~ '/../templates/openio-basic-checks.j2' }}"
        dest: /usr/bin/openio-basic-checks
        owner: root
        group: root
        mode: 0750
      tags: configure

    - name: Link check script to /root/checks.sh
      file:
        src: /usr/bin/openio-basic-checks
        dest: /root/checks.sh
        state: link
        force: true
      tags: configure
...
