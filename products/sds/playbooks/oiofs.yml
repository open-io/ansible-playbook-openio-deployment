---
- name: Setup oiofs environment
  hosts: oiofs
  any_errors_fatal: "{{ openio_any_errors_fatal }}"
  become: true
  environment: "{{ openio_environment }}"
  vars_files:
    - ../vars/sds.yml
    - ../vars/oiofs.yml
  tags:
    - check
    - checks
    - facts

  pre_tasks:
    - name: no ECD defined for this node
      assert:
        that:
          - groups.ecd is defined
          - inventory_hostname in groups.ecd
      ignore_errors: "{{ openio_ignore_assert_errors }}"
      tags: configure

    - name: no OIOPROXY defined for this node
      assert:
        that:
          - groups.oioproxy is defined
          - inventory_hostname in groups.oioproxy
      ignore_errors: "{{ openio_ignore_assert_errors }}"
      tags: configure

    - name: no credentials for the oiofs repository
      assert:
        that:
          - openio_repositories_credentials is defined
          - openio_repositories_credentials.oiofs is defined
          - openio_repositories_credentials.oiofs.user is defined
          - openio_repositories_credentials.oiofs.password is defined
      ignore_errors: "{{ openio_ignore_assert_errors }}"
      tags: configure

    - name: oiofs_cache_device or oiofs_cache_devices must be defined
      assert:
        that: >
          oiofs_cache_device is defined
          or oiofs_cache_devices is defined
      ignore_errors: "{{ openio_ignore_assert_errors }}"
      tags: configure

    - name: oiofs_cache_folder or oiofs_cache_folders must be defined
      assert:
        that: >
          oiofs_cache_folder is defined
          or oiofs_cache_folders is defined
      ignore_errors: "{{ openio_ignore_assert_errors }}"
      tags: configure

    - name: Cache device must a partition or a block device
      assert:
        that: >
          oiofs_cache_device in (ansible_mounts | map(attribute='device') | list)
          or oiofs_cache_device.split('/')[-1] in ansible_devices
      ignore_errors: "{{ openio_ignore_assert_errors }}"
      tags: configure
      when: oiofs_cache_device is defined

    - name: Cache devices must a partition or a block device
      assert:
        that: >
          item in (ansible_mounts | map(attribute='device') | list)
          or item.split('/')[-1] in ansible_devices
      ignore_errors: "{{ openio_ignore_assert_errors }}"
      tags: configure
      with_items: "{{ oiofs_cache_devices }}"
      when: oiofs_cache_devices is defined

    - name: Cache device is mounted
      assert:
        that:
          - oiofs_cache_folder in ansible_mounts | selectattr('device', 'equalto', oiofs_cache_device) | map(attribute='mount') | list
      ignore_errors: "{{ openio_ignore_assert_errors }}"
      tags: configure
      when: oiofs_cache_folder is defined

    - name: Cache devices are mounted
      assert:
        that:
          - item.0 in ansible_mounts | selectattr('device', 'equalto', item.1) | map(attribute='mount') | list
      ignore_errors: "{{ openio_ignore_assert_errors }}"
      tags: configure
      with_together:
        - "{{ oiofs_cache_folders }}"
        - "{{ oiofs_cache_devices }}"
      when: oiofs_cache_folders is defined

- name: Setup oiofs environment
  hosts: oiofs
  any_errors_fatal: "{{ openio_any_errors_fatal }}"
  become: true
  environment: "{{ openio_environment }}"
  vars_files:
    - ../vars/sds.yml
    - ../vars/oiofs.yml
  tags:
    - repo
    - repository
    - users
    - user
    - install

  roles:
    - role: repositories
      openio_repository_manage_openstack_repository: false
      openio_repository_manage_epel_repository: false
      openio_repository_products:
        oiofs:
          user: "{{ openio_repositories_credentials.oiofs.user }}"
          password: "{{ openio_repositories_credentials.oiofs.password }}"
          release: "{{ openio_sds_release }}"

    - role: users

- name: Install and configure OIOFS
  hosts: oiofs
  any_errors_fatal: "{{ openio_any_errors_fatal }}"
  become: true
  environment: "{{ openio_environment }}"
  vars_files:
    - ../vars/sds.yml
    - ../vars/oiofs.yml
  tags:
    - oiofs

  pre_tasks:
    - name: Set smallest cache device
      set_fact:
        smallest_device: "{% if oiofs_cache_device is defined %}{{oiofs_cache_device}}{% else %}{{ oiofs_cache_devices | smallest_device(ansible_devices, ansible_mounts) }}{% endif %}"

    - name: Set cache size
      set_fact:
        cache_size_bytes: "{{ (ansible_devices[smallest_device.split('/')[-1]]['size'] | human_to_bytes | int) \
          if smallest_device.split('/')[-1] in ansible_devices \
          else ansible_mounts | selectattr('device', 'equalto', smallest_device) | map(attribute='size_total') | list | first | int }}"
      tags: configure

  roles:
    - role: oiofs
      oiofs_mountpoint_default_mount_directory: "{{ oiofs_global_mount_directory }}"
      oiofs_mountpoint_default_cache_directory: "{% if oiofs_cache_folder is defined %}{{oiofs_cache_folder}}{% else %}{{ oiofs_cache_folders }}{% endif %}"
      oiofs_mountpoint_default_cache_size_bytes: "{{ cache_size_bytes }}"
      oiofs_mountpoint_default_cache_size_for_flush_activation: "{{ (cache_size_bytes | int * oiofs_cache_high_watermark | int) / 100 | int }}"
      oiofs_mountpoint_default_cache_size_on_flush_bytes: "{{ (cache_size_bytes | int * oiofs_cache_low_watermark | int) / 100 | int }}"

- name: Exports oiofs
  hosts: oiofs
  any_errors_fatal: "{{ openio_any_errors_fatal }}"
  become: true
  environment: "{{ openio_environment }}"
  vars_files:
    - ../vars/sds.yml
    - ../vars/oiofs.yml
  tags:
    - exports
    - export

  roles:
    - role: nfs
      openio_nfs_exports: "{{ oiofs_mountpoints | mounts2nfs(oiofs_global_mount_directory) }}"
      openio_nfs_systemd_managed: "{{ openio_services_systemd_enabled }}"
      openio_nfs_provision_only: "{{ openio_maintenance_mode | bool }}"
      when: oiofs_mountpoints | mounts2nfs(oiofs_global_mount_directory)

    - role: samba
      openio_samba_mountpoints: "{{ oiofs_mountpoints | mounts2samba(oiofs_global_mount_directory) }}"
      openio_samba_service_state: started
      openio_samba_service_enabled: "{{ openio_services_systemd_enabled }}"
      openio_samba_provision_only: "{{ openio_maintenance_mode | bool }}"
      when: oiofs_mountpoints | mounts2samba(oiofs_global_mount_directory)

  tasks:
    - name: SAMBA - Register Samba user password
      shell: >
        (pdbedit --user={{ samba_user }} 2>&1 > /dev/null) \
        || (echo {{ samba_user_password }}; echo {{ samba_user_password }}) \
        | smbpasswd -s -a {{ samba_user }}
      no_log: "{{ openio_no_log }}"
      register: create_user_output
      changed_when: "'Added user' in create_user_output.stdout"
      run_once: true
      when: oiofs_mountpoints | mounts2samba(oiofs_global_mount_directory)
      tags: configure
...
