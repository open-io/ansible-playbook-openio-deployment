---
- name: Check inventory
  hosts: localhost
  any_errors_fatal: true
  max_fail_percentage: 0
  gather_facts: false
  environment: "{{ openio_environment }}"

  tasks:
    - name: Stop if ansible version is too low
      assert:
        that:
          - ansible_version.full is version_compare('2.4.0', '>=')
          - ansible_version.full is version_compare('2.6.0', '<')
      ignore_errors: "{{ openio_ignore_assert_errors }}"

- name: Check hosts
  hosts: openio
  any_errors_fatal: true
  max_fail_percentage: 0
  gather_facts: false
  environment: "{{ openio_environment }}"
  become: true

  tasks:
    - name: Stop if even number of zookeeper hosts
      assert:
        that: groups.zookeeper |length is not divisibleby 2
      ignore_errors: "{{ openio_ignore_assert_errors }}"
      when: namespace_storage_policy == "THREECOPIES"

    - name: Stop if they are no enought meta0
      assert:
        that: groups.openio_directory_m0|length >= 3
      ignore_errors: "{{ openio_ignore_assert_errors }}"
      when: namespace_storage_policy == "THREECOPIES"

    - name: Stop if SDS release not match
      assert:
        that: openio_sds_release in openio_release_supported
      ignore_errors: "{{ openio_ignore_assert_errors }}"

    - name: Reaching mirror.openio.io
      uri:
        url: "http://mirror.openio.io/pub/repo/openio/sds/{{ openio_sds_release }}/"
      register: request
      changed_when: false
      failed_when: false
      tags: test
    - debug: 
        msg: "{{ request }}"
      tags: test

    - name: Stop if OpenIO repository is not reachable
      assert:
        that:
          - request.status != -1
      ignore_errors: "{{ openio_ignore_assert_errors }}"

    - name: Install python for Ansible
      raw: "test -e /usr/bin/python || (apt -y update && apt install -y python-minimal)"
      changed_when: false

    - name: Gathering facts
      setup: {}

    - name: Get running process
      command: "/bin/ps auxww"
      changed_when: false
      register: ps

    - name: Stop if non systemd OS type
      assert:
        that: ansible_service_mgr == "systemd"
      ignore_errors: "{{ openio_ignore_assert_errors }}"

    - name: Stop if unknown OS
      assert:
        that: ansible_distribution in openio_distribution_supported
      ignore_errors: "{{ openio_ignore_assert_errors }}"

    - name: Stop if SELinux activated
      assert:
        that: ansible_selinux.status == 'disabled'
      ignore_errors: "{{ openio_ignore_assert_errors }}"
      when: ansible_os_family == 'RedHat'

    - name: Stop if AppArmor activated
      assert:
        that: ansible_apparmor.status == 'disabled'
      ignore_errors: "{{ openio_ignore_assert_errors }}"

    - name: Stop if firewalld activated
      assert:
        that: "'firewalld' not in ps.stdout"
      ignore_errors: "{{ openio_ignore_assert_errors }}"

    - name: Get APT Policy
      command: /usr/sbin/policy-rc.d
      when: ansible_os_family == 'Debian'
      register: apt_policy
      changed_when: false
      failed_when: false

    - name: Fix APT policy
      copy:
        dest: /usr/sbin/policy-rc.d
        content: |
          #!/bin/sh
          exit 101 # action forbidden by policy
          EOF
      when: 
        - ansible_os_family == 'Debian'
        - apt_policy.rc != 101

    - name: Stop if kernel version is too low
      assert:
        that: ansible_kernel.split('-')[0] is version_compare('3.10', '>=')
      ignore_errors: "{{ openio_ignore_assert_errors }}"
...
