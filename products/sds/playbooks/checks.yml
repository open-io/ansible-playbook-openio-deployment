---
- name: Preflight - Check inventory
  hosts: localhost
  any_errors_fatal: "{{ openio_any_errors_fatal | d(hostvars[groups.openio | first].openio_any_errors_fatal) | bool }}"
  max_fail_percentage: 0
  vars_files:
    - ../vars/sds.yml
  vars:
    ignore_assert_errors: "{{ openio_ignore_assert_errors | d(hostvars[groups.openio | first].openio_ignore_assert_errors) | bool }}"

  tasks:
    - name: Check Ansible version
      assert:
        that:
          - ansible_version.full is version_compare('2.5.0', '>=')
          - ansible_version.full is version_compare('2.10.0', '<')
        fail_msg: "Your release of ansible is not supported, please refer to the file 'ansible.pip'"
      check_mode: false

    - name: Check number of zookeeper hosts
      assert:
        that:
          - groups.zookeeper is defined
          - groups.zookeeper | length is divisibleby 3
        fail_msg: "The number of nodes in group zookeeper must be divisible by 3"
      ignore_errors: "{{ ignore_assert_errors }}"
      check_mode: false

    - name: Check number of meta0 hosts
      assert:
        that:
          - groups.meta0 is defined
          - groups.meta0 | length >= 3
        fail_msg: "At least 3 nodes are required in the group meta0"
      ignore_errors: "{{ ignore_assert_errors }}"
      check_mode: false

    - name: Test python-netaddr
      debug:
        msg: "{{ '192.168.1.254/24' | ipaddr }}"
      register: _test_netaddr
      ignore_errors: true

    - name: Check Python-netaddr is available
      assert:
        that: _test_netaddr is success
        fail_msg: "python3-netaddr is required on your local node, please refer to the file 'ansible.pip'"
      ignore_errors: "{{ ignore_assert_errors }}"
      check_mode: false

    - name: Test metadata definition
      set_fact:
        _test_metadata: "{{ groups['meta'] \
          | map('extract', hostvars, ['openio_metadata_mounts', 0]) \
          | list }}"
      ignore_errors: true

    - name: Check hosts in 'meta' group have openio_metadata_mounts
      assert:
        that:
          - _test_metadata is iterable
          - _test_metadata is not string
        fail_msg: "The variable openio_metadata_mounts is mandatory for nodes in the meta group"
      check_mode: false

- name: Preflight - Check hosts
  hosts: openio
  strategy: linear
  any_errors_fatal: "{{ openio_any_errors_fatal }}"
  max_fail_percentage: 0
  vars_files:
    - ../vars/sds.yml
  become: true

  tasks:
    - name: SDS release not match
      assert:
        that: openio_sds_release in openio_release_supported
        fail_msg: "The openio sds release you defined is not supported, you should fix the openio_sds_release"
      ignore_errors: "{{ openio_ignore_assert_errors }}"
      check_mode: false

    - name: Number of meta0 hosts is not adequate for three copies
      assert:
        that:
          - groups.meta0 is defined
          - groups.meta0 | length >= 3
        fail_msg: "The number of nodes in group meta0 must be greater than 3 if namespace_storage_policy is THREEECOPIES"
      ignore_errors: "{{ openio_ignore_assert_errors }}"
      when: namespace_storage_policy == "THREECOPIES"

    - name: Check common variables are defined
      fail:
        msg: "{{ item }} value is required"
      when: hostvars[inventory_hostname][item] is not defined
      ignore_errors: "{{ openio_ignore_assert_errors }}"
      with_items:
        - namespace
        - openio_bind_interface
        - openio_bind_address

    - name: Check mirror reachability {{ openio_mirror }}
      uri:
        url: "http://{{ openio_mirror }}/pub/repo/openio/sds/{{ openio_sds_release }}/"
      register: request
      changed_when: false
      failed_when: false
      check_mode: false
      environment: "{{ openio_environment }}"

    - name: Check OpenIO repository is reachable
      assert:
        that:
          - request.status != -1
        fail_msg: "{{ openio_mirror }} is not reachable, maybe you need to use a proxy, see the openio_environment variable."
      ignore_errors: "{{ openio_ignore_assert_errors }}"
      check_mode: false

    - name: Check hostnames in openio group are unique
      assert:
        that:
          - groups.openio is defined
          - >
            groups['openio'] | map('extract', hostvars, ['ansible_hostname']) | list | count
            ==
            groups['openio'] | map('extract', hostvars, ['ansible_hostname']) | list | unique | count
        fail_msg: "Host names must be unique, check the result of: 'ansible openio -i inventory.yml -m setup -a filter=ansible_hostname'"
      delegate_to: localhost
      run_once: true
      when: openio_checks_filter.hostname_unique


    - name: 'Gather /etc/passwd entries'
      getent:
        database: passwd

    - name: Stop if UID is already used for an account which is not 'openio'
      assert:
        that: getent_passwd | check_uid('openio', openio_user_openio_uid)
        fail_msg: "The default uid for the user openio is not available, please set a correct uid with openio_user_openio_uid"
      ignore_errors: "{{ openio_ignore_assert_errors }}"

    - name: Stop if GID is already used for an account which is not 'openio'
      assert:
        that: getent_passwd | check_gid('openio', openio_group_openio_gid)
        fail_msg: "The default gid for the group openio is not available, please set a correct gid with openio_user_openio_gid"
      ignore_errors: "{{ openio_ignore_assert_errors }}"

    - name: Get running process
      command: "/bin/ps auxww"
      changed_when: false
      register: ps
      check_mode: false

    - name: Get 'open files' limit
      shell: "ulimit -n"
      changed_when: false
      register: _openfiles
      check_mode: false

    - name: Check max open files
      assert:
        that: _openfiles.stdout | int >= openio_limits_openfiles_min | int
        fail_msg: "You have to increase the file descriptor limit"
      ignore_errors: "{{ openio_ignore_assert_errors }}"

    - name: Check systemd
      assert:
        that: ansible_service_mgr == "systemd"
        fail_msg: "A systemd-based distribution is mandatory for the deployment of openio SDS."
      ignore_errors: "{{ openio_ignore_assert_errors }}"

    - name: Check Operating System is supported
      assert:
        that: ansible_distribution in openio_distribution_supported
        fail_msg: "This linux distribution is not supported"
      ignore_errors: "{{ openio_ignore_assert_errors }}"

    - name: Check SELinux is disabled
      assert:
        that: ansible_selinux.status == 'disabled'
        fail_msg: "SELinux must be disabled and libselinux-python must be installed"
      ignore_errors: "{{ openio_ignore_assert_errors }}"
      when:
        - openio_checks_filter.selinux
        - ansible_os_family == 'RedHat'

    - name: Check AppArmor is disabled
      assert:
        that: ansible_apparmor.status == 'disabled'
        fail_msg: "AppArmor must be disabled"
      ignore_errors: "{{ openio_ignore_assert_errors }}"
      when:
        - openio_checks_filter.apparmor
        - ansible_os_family == 'Debian'

    - name: Stop and disable firewalld.
      service:
        name: firewalld
        state: stopped
        enabled: false
      register: _firewalld_disable
      when:
        - openio_manage_os_requirement
        - "'firewalld' in ps.stdout"
        - ansible_os_family == 'RedHat'

    - name: Check firewalld is disabled
      assert:
        that: "'firewalld' not in ps.stdout or _firewalld_disable | default(false) is success"
        fail_msg: "The firewalld service must be disabled"
      ignore_errors: "{{ openio_ignore_assert_errors }}"

    - name: Check memory for zookeeper
      assert:
        that: ansible_memtotal_mb >= 1830
      ignore_errors: "{{ openio_ignore_assert_errors }}"
      when:
        - inventory_hostname in groups['zookeeper']
        - openio_checks_filter.zookeeper_memory

    - name: Check kernel version
      assert:
        that: ansible_kernel.split('-')[0] is version_compare('3.10', '>=')
        fail_msg: "The running kernel version is too old"
      ignore_errors: "{{ openio_ignore_assert_errors }}"

    - name: Check http_proxy environment variable
      assert:
        that:
          - ansible_env.http_proxy is not defined or openio_environment.http_proxy is defined
          - ansible_env.https_proxy is not defined or openio_environment.https_proxy is defined
        fail_msg: "You defined a proxy in /etc/environment but this definition is missing in the openio_environment"
      ignore_errors: "{{ openio_ignore_assert_errors }}"

    - name: Fill /etc/yum/vars/contentdir
      copy:
        dest: /etc/yum/vars/contentdir
        content: "{{ ansible_distribution | lower }}"
      when:
        - ansible_os_family == 'RedHat'

    - block:
        - name: Check mountpoints are not on the root volume
          command: "awk '{if($2==\"{{ item.mountpoint }}\") { print } }' /proc/mounts"
          loop: "{{ openio_data_mounts  + openio_metadata_mounts | sort(attribute='mountpoint') | unique }}"
          register: _awk
          failed_when: _awk.stdout_lines == []
          check_mode: false
          changed_when: false

        - name: Check mountpoints match block devices in host_vars
          command: "awk '{if($2==\"{{ item.mountpoint }}\") { print \"MOUNTPOINT=\"$2; system(\"blkid -o export \"$1)}}' /proc/mounts"
          register: _awk
          failed_when: needle not in _awk.stdout_lines
          changed_when: false
          loop: "{{ openio_data_mounts + openio_metadata_mounts | sort(attribute='mountpoint') | unique }}"
          vars:
            needle: "{{ item.partition | regex_replace('^/', 'DEVNAME=/') | d('nowhere to be found') }}"

      when: openio_checks_filter.mountpoint
...
